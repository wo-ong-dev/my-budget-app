name: Build and Deploy (EC2 Nginx)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          # Set if you want to override at build-time. Optional because code also uses absolute "/api" paths.
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.KEY }}

      - name: Deploy to EC2
        run: |
          set -e
          set -x  # Enable debug mode

          # Use secrets directly to avoid env variable conflicts
          SSH_HOST="${{ secrets.HOST }}"
          SSH_USER="${{ secrets.USER }}"
          SSH_PORT="${{ secrets.PORT }}"
          TARGET_DIR="${{ secrets.APP_DIR }}"

          # Remove any whitespace, newlines, carriage returns from secrets
          SSH_HOST=$(echo "$SSH_HOST" | tr -d '[:space:]')
          SSH_USER=$(echo "$SSH_USER" | tr -d '[:space:]')
          SSH_PORT=$(echo "$SSH_PORT" | tr -d '[:space:]')
          TARGET_DIR=$(echo "$TARGET_DIR" | tr -d '[:space:]')

          # Remove common prefixes if accidentally included (e.g., "SSH_HOST:13.125.205.126" -> "13.125.205.126")
          SSH_HOST="${SSH_HOST#*:}"
          SSH_USER="${SSH_USER#*:}"
          SSH_PORT="${SSH_PORT#*:}"
          TARGET_DIR="${TARGET_DIR#*:}"

          # Validate required secrets
          if [ -z "$SSH_HOST" ]; then
            echo "‚ùå ERROR: HOST secret is not set!"
            exit 1
          fi

          # Set defaults
          SSH_PORT=${SSH_PORT:-22}
          SSH_USER=${SSH_USER:-ec2-user}
          TARGET_DIR=${TARGET_DIR:-/var/www/html}

          echo "======================================"
          echo "üöÄ Starting Deployment"
          echo "======================================"
          echo "üì° Host: ${SSH_HOST}"
          echo "üë§ User: ${SSH_USER}"
          echo "üîå Port: ${SSH_PORT}"
          echo "üìÇ Target: ${TARGET_DIR}"
          echo "======================================"

          # Check SSH key is loaded
          echo "üîë Checking SSH agent..."
          ssh-add -l || echo "‚ö†Ô∏è No SSH keys loaded"

          # Test SSH connection with verbose output
          echo "üîç Testing SSH connection..."
          if ! ssh -v -p ${SSH_PORT} -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${SSH_USER}@${SSH_HOST} "echo 'Connection OK'" 2>&1; then
            echo "‚ùå SSH connection failed!"
            echo "Debug: Trying to connect to ${SSH_USER}@${SSH_HOST}:${SSH_PORT}"
            exit 1
          fi
          echo "‚úÖ SSH connection successful"

          # Create tar archive for faster transfer
          echo "üì¶ Creating deployment archive..."
          tar -czf deploy.tar.gz -C dist .
          ls -lh deploy.tar.gz

          # Upload archive to EC2
          echo "üì§ Uploading files to EC2..."
          scp -P ${SSH_PORT} -o StrictHostKeyChecking=no deploy.tar.gz ${SSH_USER}@${SSH_HOST}:/tmp/deploy.tar.gz
          echo "‚úÖ Upload complete"

          # Deploy on EC2
          echo "üöÄ Deploying on EC2..."
          ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST} bash << EOF
            set -e
            set -x

            echo "üìÇ Extracting files..."
            rm -rf /tmp/my-budget-app
            mkdir -p /tmp/my-budget-app
            tar -xzf /tmp/deploy.tar.gz -C /tmp/my-budget-app/
            ls -la /tmp/my-budget-app/

            echo "üìÅ Preparing target directory..."
            sudo mkdir -p ${TARGET_DIR}

            echo "üóëÔ∏è  Removing old files..."
            sudo rm -rf ${TARGET_DIR}/*

            echo "üìã Copying new files..."
            sudo cp -r /tmp/my-budget-app/* ${TARGET_DIR}/

            echo "üë§ Setting permissions..."
            sudo chown -R nginx:nginx ${TARGET_DIR} 2>/dev/null || sudo chown -R www-data:www-data ${TARGET_DIR} 2>/dev/null || true

            echo "‚úÖ Files deployed successfully"
            ls -lh ${TARGET_DIR}/assets/ || true

            echo "üîÑ Restarting Nginx..."
            if command -v systemctl >/dev/null 2>&1; then
              sudo systemctl restart nginx || true
              echo "‚úÖ Nginx restarted"
            fi

            echo "üßπ Cleaning up..."
            rm -f /tmp/deploy.tar.gz
            rm -rf /tmp/my-budget-app

            echo "üéâ Deployment completed successfully!"
          EOF

          echo "======================================"
          echo "‚úÖ Deployment Finished"
          echo "======================================"

 
