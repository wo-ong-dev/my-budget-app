name: Build and Deploy (EC2 Nginx)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          # Set if you want to override at build-time. Optional because code also uses absolute "/api" paths.
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.KEY }}

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
          PORT: ${{ secrets.PORT }}
          APP_DIR: ${{ secrets.APP_DIR }}
        run: |
          set -e
          SSH_PORT=${PORT:-22}
          TARGET_DIR=${APP_DIR:-/var/www/html}
          DEPLOY_USER=${USER:-ec2-user}

          echo "======================================"
          echo "🚀 Starting Deployment"
          echo "======================================"
          echo "📡 Host: ${HOST}"
          echo "👤 User: ${DEPLOY_USER}"
          echo "🔌 Port: ${SSH_PORT}"
          echo "📂 Target: ${TARGET_DIR}"
          echo "======================================"

          # Debug: Check loaded SSH keys
          echo "🔑 Checking loaded SSH keys..."
          ssh-add -l || echo "⚠️  No keys loaded in ssh-agent"

          # Test SSH connection with verbose output
          echo "🔍 Testing SSH connection..."
          echo "Command: ssh -p ${SSH_PORT} ${DEPLOY_USER}@${HOST}"

          if ! ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${DEPLOY_USER}@${HOST} "echo 'Connection OK'" 2>&1; then
            echo ""
            echo "⚠️  Connection failed with ${DEPLOY_USER}, trying ec2-user..."
            DEPLOY_USER=ec2-user
            echo "Command: ssh -p ${SSH_PORT} ${DEPLOY_USER}@${HOST}"

            if ! ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no -o ConnectTimeout=10 -vvv ${DEPLOY_USER}@${HOST} "echo 'Connection OK'" 2>&1; then
              echo ""
              echo "❌ SSH connection failed!"
              echo "🔍 Debug: Trying to show more details..."
              ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no -o ConnectTimeout=10 -vvv ${DEPLOY_USER}@${HOST} "echo 'test'" 2>&1 | tail -30
              exit 1
            fi
          fi
          echo "✅ SSH connection successful as ${DEPLOY_USER}"

          # Create tar archive for faster transfer
          echo "📦 Creating deployment archive..."
          tar -czf deploy.tar.gz -C dist .
          ls -lh deploy.tar.gz

          # Upload archive to EC2
          echo "📤 Uploading files to EC2..."
          scp -P ${SSH_PORT} -o StrictHostKeyChecking=no deploy.tar.gz ${DEPLOY_USER}@${HOST}:/tmp/deploy.tar.gz
          echo "✅ Upload complete"

          # Deploy on EC2
          echo "🚀 Deploying on EC2..."
          ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no ${DEPLOY_USER}@${HOST} bash << EOF
            set -e
            set -x

            echo "📂 Extracting files..."
            rm -rf /tmp/my-budget-app
            mkdir -p /tmp/my-budget-app
            tar -xzf /tmp/deploy.tar.gz -C /tmp/my-budget-app/
            ls -la /tmp/my-budget-app/

            echo "📁 Preparing target directory..."
            sudo mkdir -p ${TARGET_DIR}

            echo "🗑️  Removing old files..."
            sudo rm -rf ${TARGET_DIR}/*

            echo "📋 Copying new files..."
            sudo cp -r /tmp/my-budget-app/* ${TARGET_DIR}/

            echo "👤 Setting permissions..."
            sudo chown -R nginx:nginx ${TARGET_DIR} 2>/dev/null || sudo chown -R www-data:www-data ${TARGET_DIR} 2>/dev/null || true

            echo "✅ Files deployed successfully"
            ls -lh ${TARGET_DIR}/assets/ || true

            echo "🔄 Restarting Nginx..."
            if command -v systemctl >/dev/null 2>&1; then
              sudo systemctl restart nginx || true
              echo "✅ Nginx restarted"
            fi

            echo "🧹 Cleaning up..."
            rm -f /tmp/deploy.tar.gz
            rm -rf /tmp/my-budget-app

            echo "🎉 Deployment completed successfully!"
          EOF

          echo "======================================"
          echo "✅ Deployment Finished"
          echo "======================================"

 
